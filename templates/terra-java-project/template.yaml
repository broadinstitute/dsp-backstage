apiVersion: scaffolder.backstage.io/v1beta3
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-template
kind: Template
metadata:
  name: terra-java-project-template
  title: Terra Java Project Template
  description: A template for spinning up springboot project for a Terra Service
  tags:
    - terra
    - java
    - springboot
    - dsp
spec:
  owner: user:dvoet
  type: service

  # These parameters are used to generate the input form in the frontend, and are
  # used to gather input data for the execution of the template.
  parameters:
    - title: Project Information
      required:
        - name
        - visibility
        - projectSlug
      properties:
        name:
          title: Name
          type: string
          description: Unique name of the project. This will be used in the repository name and in the docker image name.
          ui:placholder: terra-javatemplate-service
          ui:autofocus: true
          ui:field: ValidateRepo
        projectSlug:
          title: Project Slug
          type: string
          description: A short one word name for the project used in infrastructure representations. NO HYPHENS!
          ui:field: ValidateSlug
        visibility:
          title: Repo Visibility
          type: string
          description: Should the repo be public or private?
          default: public
          enum:
            - public
            - private
          enumNames:
            - Public
            - Private
    - title: Choose an Owner
      required:
        - owner
        - organization
      properties:
        organization:
          title: Organization
          type: string
          description: Github organization where the repository will be created
          default: DataBiosphere
          enum:
            - DataBiosphere
            - broadinstitute
          enumNames:
            - Data Biosphere
            - Broad Institute
        owner:
          title: Team
          type: string
          description: Github team that will own the repository
          ui:field: GithubTeamPicker
          ui:autofocus: true
    - title: Tracking Info
      required:
        - slackChannel
        - jiraTicket
      properties:
        slackChannel:
          title: Slack Channel
          type: string
          description: Notification slack channel for team owning this service
          ui:placholder: '#my-channel'
          ui:autofocus: true
        jiraTicket:
          title: Jira Ticket
          type: string
          description: Jira ticket tracking work for service setup
          ui:placholder: XXX-123

  # These steps are executed in the scaffolder backend, using data that we gathered
  # via the parameters above.
  steps:
    # Each step executes an action, in this case one templates files into the working directory.

    #############
    # Sets up a new application Code Repository based on Terra Java Project Template
    #############
    - id: fetch-java-project-template
      name: Fetch Terra Java Project Template
      action: fetch:template
      input:
        url: https://github.com/DataBiosphere/terra-java-project-cookiecutter
        values:
          name: ${{ parameters.name }}
          owner: ${{ parameters.owner }}
          projectSlug: ${{ parameters.projectSlug }}
          organization: ${{ parameters.organization }}
          slackChannel: ${{ parameters.slackChannel }}
          catalogInfoFileName: foundation

    # This step publishes the contents of the working directory to GitHub.
    - id: publish-new-java-repo
      name: Creating New Service Repository
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: This is ${{ parameters.name }}
        repoUrl: 'github.com?repo=${{ parameters.name }}&owner=${{ parameters.organization }}'
        repoVisibility: ${{ parameters.visibility }}
        defaultBranch: main
        access: ${{ parameters.organization }}/${{ parameters.owner }}
        requiredApprovingReviewCount: 2
        allowMergeCommit: false
        allowSquashMerge: true
        allowRebaseMerge: false
        gitCommitMessage: |
          [${{ parameters.jiraTicket }}] Initial setup of ${{ parameters.name }}
        gitAuthorName: ${{ user.entity.metadata.name }}
        gitAuthorEmail: ${{ user.entity.spec.profile.email }}
        collaborators:
          - access: admin
            team: databiosphere/broad-devops
          - access: push
            team: databiosphere/broadwrite
          - access: admin
            user: dsp-atlantis
          - access: admin
            user: broadbot

    - id: wait-for-github-propagation
      name: Wait for Github Propagation
      action: debug:wait
      input:
        seconds: 5

    # register our new component in the backstage catalog.
    - id: register
      name: Register New Service in Backstage Catalog
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish-new-java-repo'].output.repoContentsUrl }}
        catalogInfoPath: '/foundation.yaml'

    #################
    # Creates a PR to setup the terraform for github actions secrets for the new service
    #################
    - id: fetch-atlantis-config
      name: Fetch terraform-ap-deployments Atlantis Config
      action: fetch:plain:file
      input:
        url: 'https://github.com/broadinstitute/terraform-ap-deployments/tree/master/atlantis.yaml'
        targetPath: terraform/atlantis.yaml

    - id: update-atlantis-config
      name: Add New Repo to Atlantis Config
      action: roadiehq:utils:jsonata:yaml:transform
      input:
        path: './terraform/atlantis.yaml'
        # This is a jsonata expression that will be evaluated against the contents of the file at the path above.
        # This expression will append a new project definition to the projects array in the atlantis config,
        # while leaving existing projects untouched.
        # https://docs.jsonata.org/overview.html
        expression: |-
          (
            $repoName := "${{ parameters.organization }}-${{ parameters.name }}";
            $ ~> | $ | {
              "projects": [
                projects,
                {
                  "name": $repoName,
                  "dir": "github",
                  "workflow": "./tfvars/$WORKSPACE.tfvars",
                  "workspace": $repoName,
                  "terraform_version": "v1.1.1",
                  "autoplan": {
                    "enabled": false,
                    "when_modified": ["modules", "'*.tf'", "tfvars/" & $repoName & ".tfvars"]
                  }
                }
              ]
            } |
          )

    - id: write-updated-atlantis-config
      name: Write Updated Atlantis Config
      action: roadiehq:utils:fs:write
      input:
        path: ./terraform/atlantis.yaml
        content: ${{ steps['update-atlantis-config'].output.result }}

    - id: fetch-github-tfvar-template
      name: Fetch Github Terraform Template
      action: fetch:template
      input:
        url: https://github.com/broadinstitute/terraform-ap-deployments/tree/master/cookiecutters/github
        targetPath: ./terraform/github
        values:
          name: ${{ parameters.name }}
          organization: ${{ parameters.organization }}

    - id: terraform-pr
      name: Create Terraform PR
      action: publish:github:pull-request
      input:
        repoUrl: 'github.com?repo=terraform-ap-deployments&owner=broadinstitute'
        branchName: '${{ parameters.jiraTicket }}-${{ parameters.name }}-github-terraform'
        gitAuthorName: ${{ user.entity.metadata.name }}
        gitAuthorEmail: ${{ user.entity.spec.profile.email }}
        title: '[${{ parameters.jiraTicket }}] ${{ parameters.name }} Github Terraform Setup'
        description: |
          This PR sets up the standard terraform resources for managing the github repo for a new DSP service. From this point
          forward follow the same process as any other terraform PR with atlantis. see README.md for more details.

          - PR generated by [DSP Backstage](https://broad.io/backstage)
        sourcePath: 'terraform'

    #################
    # Creates a PR to setup the helm chart for the new service based on the foundation library chart
    #################
    - id: fetch-helmchart-template
      name: Fetch Helm Chart PR Template
      action: fetch:template
      input:
        url: https://github.com/broadinstitute/terra-helmfile/tree/master/cookiecutters/charts
        targetPath: ./helm/charts
        values:
          name: ${{ parameters.name }}
          projectSlug: ${{ parameters.projectSlug }}
    - id: fetch-helm-values-template
      name: Fetch Helm Values Files PR Template
      action: fetch:template
      input:
        url: https://github.com/broadinstitute/terra-helmfile/tree/master/cookiecutters/values
        targetPath: ./helm/values
        values:
          name: ${{ parameters.name }}
          projectSlug: ${{ parameters.projectSlug }}

    - id: helm-chart-pr
      name: Create Helm Chart PR
      action: publish:github:pull-request
      gitAuthorName: ${{ user.entity.metadata.name }}
      gitAuthorEmail: ${{ user.entity.spec.profile.email }}
      input:
        repoUrl: 'github.com?repo=terra-helmfile&owner=broadinstitute'
        branchName: '${{ parameters.jiraTicket }}-${{ parameters.name }}-helm-chart'
        title: '[${{ parameters.jiraTicket }}] ${{ parameters.name }} Helm Chart Setup'
        description: |
          This PR sets up the standard helm chart for a new DSP service. From this point
          forward follow the same process as any other helm chart PR with in terra-helmfile. see README.md for more details.

          - PR generated by [DSP Backstage](https://broad.io/backstage)
        sourcePath: 'helm'

    #################
    # Creates a PR to setup the Terraform resources needed to run the service in a live environment
    #################
    - id: fetch-atlantis-config-live
      name: Fetch terraform-ap-deployments Atlantis Config
      action: fetch:plain:file
      input:
        url: 'https://github.com/broadinstitute/terraform-ap-deployments/tree/master/atlantis.yaml'
        targetPath: terraform-live/atlantis.yaml

    - id: update-atlantis-config-live
      name: Add New Repo to Atlantis Config
      action: roadiehq:utils:jsonata:yaml:transform
      input:
        path: './terraform-live/atlantis.yaml'
        # This is a jsonata expression that will be evaluated against the contents of the file at the path above.
        # This expression will append a new project definition to the projects array in the atlantis config,
        # while leaving existing projects untouched.
        # https://docs.jsonata.org/overview.html
        expression: |-
          (
            $ ~> | $ | {
              "projects": [
                projects,
                {
                  "name": "${{parameters.projectSlug}}-dev",
                  "dir": "${{parameters.projectSlug}}",
                  "workflow": "./tfvars/$WORKSPACE.tfvars",
                  "workspace": "dev",
                  "terraform_version": "v1.5.7",
                  "autoplan": {
                    "enabled": true
                  }
                },
                {
                  "name": "${{parameters.projectSlug}}-qa",
                  "dir": "${{parameters.projectSlug}}",
                  "workflow": "./tfvars/$WORKSPACE.tfvars",
                  "workspace": "qa",
                  "terraform_version": "v1.5.7",
                  "autoplan": {
                    "enabled": true
                  }
                }
              ]
            } |
          )
    - id: write-updated-atlantis-config-live
      name: Write Updated Atlantis Config
      action: roadiehq:utils:fs:write
      input:
        path: ./terraform-live/atlantis.yaml
        content: ${{ steps['update-atlantis-config-live'].output.result }}

    - id: fetch-github-tfvar-template-live
      name: Fetch Github Terraform Template
      action: fetch:template
      input:
        url: https://github.com/broadinstitute/terraform-ap-deployments/tree/master/cookiecutters/gke-service
        targetPath: ./terraform-live
        values:
          projectSlug: ${{ parameters.projectSlug }}

    - id: terraform-pr-live
      name: Create Terraform Live Environment PR
      action: publish:github:pull-request
      input:
        repoUrl: 'github.com?repo=terraform-ap-deployments&owner=broadinstitute'
        branchName: '${{ parameters.jiraTicket }}-${{ parameters.name }}-dev-env-terraform'
        gitAuthorName: ${{ user.entity.metadata.name }}
        gitAuthorEmail: ${{ user.entity.spec.profile.email }}
        title: '[${{ parameters.jiraTicket }}] ${{ parameters.name }} Live Environment Terraform Setup'
        description: |
          This PR sets up the standard terraform resources for running ${{ parameters.name }} in the Terra Dev Environment. From this point
          forward follow the same process as any other terraform PR with atlantis. see README.md for more details.

          - PR generated by [DSP Backstage](https://broad.io/backstage)
        sourcePath: 'terraform-live'

  # Outputs are displayed to the user after a successful execution of the template.
  output:
    links:
      - title: Repository
        url: ${{ steps['publish-new-java-repo'].output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
      - title: Github Actions Terraform Setup PR
        url: ${{ steps['terraform-pr'].output.remoteUrl }}
      - title: Helm Chart PR
        url: ${{ steps['helm-chart-pr'].output.remoteUrl }}
      - title: Live Environment Terraform Setup
        url: ${{ steps['terraform-pr-live'].output.remoteUrl }}
