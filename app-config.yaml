app:
  title: DSP Backstage
  baseUrl: http://localhost:3000

organization:
  name: Data Science Platform

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/auth/service-to-service-auth for
  # information on the format
  # auth:
  #   keys:
  #     - secret: ${BACKEND_SECRET}
  baseUrl: http://localhost:8080
  listen:
    port: 8080
    # Uncomment the following host directive to bind to specific interfaces
    # host: 127.0.0.1
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    img-src: ["'self'", 'data:', 'https:']
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: http://localhost:3000
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  # This is for local development only, it is not recommended to use this in production
  # The production database configuration is stored in app-config.production.yaml
  database:
    client: pg
    connection:
      host: ${POSTGRES_HOST}
      port: ${POSTGRES_PORT}
      user: ${POSTGRES_USER}
      password: ${POSTGRES_PASSWORD}
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

integrations:
  github:
    - host: github.com
      # This is a Personal Access Token or PAT from GitHub. You can find out how to generate this token, and more information
      # about setting up the GitHub integration here: https://backstage.io/docs/getting-started/configuration#setting-up-a-github-integration
      token: ${BACKSTAGE_GITHUB_TOKEN}
    ### Example for how to add your GitHub Enterprise instance using the API:
    # - host: ghe.example.net
    #   apiBaseUrl: https://ghe.example.net/api/v3
    #   token: ${GHE_TOKEN}

# proxy:
### Example for how to add a proxy endpoint for the frontend.
### A typical reason to do this is to handle HTTPS and CORS for internal services.
# '/test':
#   target: 'https://example.com'
#   changeOrigin: true

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: 'local' # Alternatives - 'external'
  generator:
    runIn: 'docker' # Alternatives - 'local'
  publisher:
    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

auth:
  # see https://backstage.io/docs/auth/ to learn about auth providers
  environment: development
  providers:
    github:
      development:
        clientId: ${BACKSTAGE_AUTH_GITHUB_CLIENT_ID}
        clientSecret: ${BACKSTAGE_AUTH_GITHUB_CLIENT_SECRET}

spotify:
  licenseKey: ${BACKSTAGE_LICENSE_KEY}

soundcheck:
  results:
    history:
      enable: true
  certifications:
    history:
      enable: true
  programs:
    $include: ./soundcheck/soundcheck-programs.yaml
  checks:
    $include: ./soundcheck/soundcheck-checks.yaml
  collectors:
    github:
      $include: ./soundcheck/github-facts-collectors.yaml
    scm:
      $include: ./soundcheck/scm-facts-collectors.yaml

scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options
  defaultAuthor:
    name: broadbot
    email: broadbot@broadinstitute.org
  defaultCommitMessage: 'Repository Scaffolding from Backstage'

catalog:
  import:
    entityFilename: foundation.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [Component, System, API, Resource, Location, Template]
  locations:
    - type: file
      target: ../../templates/terra-java-project/template.yaml
    - type: file
      target: ../../templates/systems/terra.yaml
  providers:
    github:
      broadinstituteProvider:
        organization: broadinstitute
        catalogPath: /foundation.yaml
        filters:
          branch: 'main'
          repository: '.*'
        validateLocationsExist: true
        schedule: # optional; same options as in TaskScheduleDefinition
          # supports cron, ISO duration, "human duration" as used in code
          frequency: { hours: 6 }
          # supports ISO duration, "human duration" as used in code
          timeout: { minutes: 3 }
          initialDelay: { minutes: 5 }
      databiosphereProvider:
        organization: databiosphere
        catalogPath: /foundation.yaml
        filters:
          branch: 'main'
          repository: '.*'
        validateLocationsExist: true
        schedule: # optional; same options as in TaskScheduleDefinition
          # supports cron, ISO duration, "human duration" as used in code
          frequency: { hours: 6 }
          # supports ISO duration, "human duration" as used in code
          timeout: { minutes: 3 }
          initialDelay: { minutes: 5 }
